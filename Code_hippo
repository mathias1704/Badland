void dessinerDecor() {
    int x = joueur.scrollX;
    int restant = LARGEUR_ECRAN;
    int ecran_x = 0;
    int offset = 0;

    for (int i = 0; i < decor.nb_images && restant > 0; i++) {
        int image_w = decor.images[i]->w;

        if (x >= image_w) {
            x -= image_w;
            continue;
        }

        int largeur_visible = image_w - x;
        if (largeur_visible > restant) largeur_visible = restant;

        blit(decor.images[i], buffer, x, 0, ecran_x, 0, largeur_visible, HAUTEUR_ECRAN);

        restant -= largeur_visible;
        ecran_x += largeur_visible;
        x = 0;
    }
}

void gererBoost() {
    if (boost_actif) {
        boost_timer++;
        if (boost_timer >= BOOST_DUREE) {
            boost_actif = 0;
            scroll_vitesse = SCROLL_VITESSE_BASE;
        }
    }
}

void gererSaut() {
    joueur.vitesseY = SAUT / joueur.poids;
    printf("Saut! Vitesse: %.2f (poids: %.2f)\n", joueur.vitesseY, joueur.poids);
}

void gererScroll() {
    joueur.scrollX += scroll_vitesse;

}

void afficherJoueur() {
    // Joueur principal
    BITMAP* temp = create_bitmap(joueur_img->w * joueur.echelle,
                               joueur_img->h * joueur.echelle);
    stretch_blit(joueur_img, temp, 0, 0, joueur_img->w, joueur_img->h,
               0, 0, temp->w, temp->h);
    draw_sprite(buffer, temp, joueur.x - temp->w/2, joueur.y - temp->h/2);
    destroy_bitmap(temp);

    // Clones
    if (multiplicateur_actif) {
        for (int i = 0; i < MAX_CLONES; i++) {
            if (clones[i].actif) {
                BITMAP* clone_temp = create_bitmap(joueur_img->w * joueur.echelle,
                                                 joueur_img->h * joueur.echelle);
                stretch_blit(joueur_img, clone_temp, 0, 0, joueur_img->w, joueur_img->h,
                           0, 0, clone_temp->w, clone_temp->h);
                draw_sprite(buffer, clone_temp,
                          clones[i].x - clone_temp->w/2,
                          clones[i].y - clone_temp->h/2);
                destroy_bitmap(clone_temp);
            }
        }
    }
}
void afficherObstacles() {
    for (int i = 0; i < NB_OBSTACLES; i++) {
        int ox = obstacles[i].x - joueur.scrollX;
        int oy = obstacles[i].y;

        // Ne pas afficher si hors écran
        if (ox < -100 || ox > LARGEUR_ECRAN) continue;

        switch (obstacles[i].type) {
            case 0: draw_sprite(buffer, obstacle_pique, ox, oy); break;
            case 1: draw_sprite(buffer, obstacle_roue, ox, oy); break;
            case 2: draw_sprite(buffer, obstacle_piston, ox, oy); break;
            case 3: draw_sprite(buffer, bonus_noir_img, ox, oy); break;
            case 4: draw_sprite(buffer, bonus_vert_img, ox, oy); break;
            case 5:
                if (bonus_bleu_img) {

                    // Puis l'image par-dessus
                    draw_sprite(buffer, bonus_bleu_img, ox, oy);


                }
            break;
        }
    }
}
void verifierCollisions() {
    // Dimensions de la hitbox du joueur
    int joueurW = 32 * joueur.echelle;  // Largeur ajustée à l'échelle
    int joueurH = 32 * joueur.echelle;  // Hauteur ajustée à l'échelle
    int joueurLeft = joueur.x - joueurW/2;
    int joueurRight = joueur.x + joueurW/2;
    int joueurTop = joueur.y - joueurH/2;
    int joueurBottom = joueur.y + joueurH/2;

    for (int i = 0; i < NB_OBSTACLES; i++) {
        // Position écran de l'obstacle

        int obsX = obstacles[i].x - joueur.scrollX;
        int obsY = obstacles[i].y;

        // Dimensions de l'obstacle selon son type
        int obsW, obsH;
        switch (obstacles[i].type) {
            case 0: // Pique
                obsW = obstacle_pique->w;
                obsH = obstacle_pique->h;
                break;
            case 1: // Roue
                obsW = obstacle_roue->w;
                obsH = obstacle_roue->h;
                break;
            case 2: // Piston
                obsW = obstacle_piston->w;
                obsH = obstacle_piston->h;
                break;
            case 3: // Bonus noir
                obsW = bonus_noir_img->w;
                obsH = bonus_noir_img->h;
                break;
            case 4: // Bonus vert
                obsW = bonus_vert_img->w;
                obsH = bonus_vert_img->h;
                break;
            case 5: // Bonus bleu
                obsW = bonus_bleu_img->w;
                obsH = bonus_bleu_img->h;
                break;
            default:
                continue; // Obstacle inconnu
        }

        // Vérification collision
        if (joueurRight > obsX &&
            joueurLeft < obsX + obsW &&
            joueurBottom > obsY &&
            joueurTop < obsY + obsH) {

            // Gestion selon type d'obstacle
            switch (obstacles[i].type) {
                case 0: // Pique
                case 1: // Roue
                case 2: // Piston
                    joueur.vivant = 0; // Le joueur meurt
                    break;

                case 3: // Bonus noir
                    activerBonus();
                    obstacles[i].x = -1000; // Faire disparaître le bonus
                    break;

                case 4: // Bonus vert
                    activerBonusVert();
                    obstacles[i].x = -1000;
                    break;

                case 5: // Bonus bleu
                    activerMultiplicateur();
                    obstacles[i].x = -1000;
                    break;
            }
        }
    }
}
void afficherRegles() {
    clear_bitmap(buffer);
    textout_ex(buffer, font, "=== REGLES ===", 100, 100, makecol(255, 215, 0), -1);
    textout_ex(buffer, font, "- Appuyez sur ESPACE pour voler.", 100, 150, makecol(255, 255, 255), -1);
    textout_ex(buffer, font, "- Evitez les obstacles !", 100, 200, makecol(255, 255, 255), -1);
    textout_ex(buffer, font, "- Ne vous faites pas écraser par les roues !", 100, 250, makecol(255, 255, 255), -1);
    textout_ex(buffer, font, "- Appuyez sur ESC pour quitter une partie.", 100, 300, makecol(255, 255, 255), -1);

    textout_ex(buffer, font, "Appuyez sur ESPACE pour revenir au menu.", 100, 400, makecol(0, 255, 0), -1);
    blit(buffer, screen, 0, 0, 0, 0, LARGEUR_ECRAN, HAUTEUR_ECRAN);

    while (!key[KEY_SPACE]) rest(20);
    clear_keybuf();
}
void saisirPseudo() {
    int i = 0;
    char c;
    joueur.pseudo[0] = '\0';

    while (!key[KEY_ENTER]) {
        clear_bitmap(buffer);
        textout_centre_ex(buffer, font, "Entrez votre pseudo :", LARGEUR_ECRAN/2, 250, makecol(255, 255, 255), -1);
        textout_centre_ex(buffer, font, joueur.pseudo, LARGEUR_ECRAN/2, 300, makecol(0, 255, 0), -1);
        blit(buffer, screen, 0, 0, 0, 0, LARGEUR_ECRAN, HAUTEUR_ECRAN);

        if (keypressed()) {
            c = readkey() & 0xff;
            if ((c >= 32 && c <= 126) && i < PSEUDO_MAX - 1) {
                joueur.pseudo[i++] = c;
                joueur.pseudo[i] = '\0';
            } else if (c == 8 && i > 0) {
                i--;
                joueur.pseudo[i] = '\0';
            }
        }
        rest(20);
    }
    clear_keybuf();
}

void afficherMenuPrincipal() {
    const char* options[] = {"Commencer une partie", "Reprendre une partie", "Afficher les règles", "Quitter"};
    int nbOptions = sizeof(options) / sizeof(options[0]);
    int selection = 0;
    int couleur_normal = makecol(255, 255, 255);
    int couleur_selection = makecol(0, 255, 0);

    while (1) {
        clear_bitmap(buffer);

        textout_centre_ex(buffer, font, "=== BADLAND ===", LARGEUR_ECRAN/2, 100, makecol(255, 215, 0), -1);

        for (int i = 0; i < nbOptions; i++) {
            int couleur = (i == selection) ? couleur_selection : couleur_normal;
            textout_centre_ex(buffer, font, options[i], LARGEUR_ECRAN/2, 200 + i * 50, couleur, -1);
        }

        blit(buffer, screen, 0, 0, 0, 0, LARGEUR_ECRAN, HAUTEUR_ECRAN);

        if (keypressed()) {
            int touche = readkey() >> 8;
            if (touche == KEY_UP) {
                selection--;
                if (selection < 0) selection = nbOptions - 1;
            }
            if (touche == KEY_DOWN) {
                selection++;
                if (selection >= nbOptions) selection = 0;
            }
            if (touche == KEY_ENTER) {
                switch (selection) {
                    case 0:
                        saisirPseudo();
                    int choix = afficherMenuChoixNiveau();
                    if (choix == 1) jouerNiveau(1);
                    else if (choix == 2) jouerNiveau(2);
                    else if (choix == 3) jouerNiveau(3);
                    break;

                    break;

                    break;
                    case 1: // Reprendre une partie
                        // à implémenter si tu as des sauvegardes
                            allegro_message("Pas encore implémente !");
                    break;
                    case 2: // Afficher les règles
                        afficherRegles();
                    break;
                    case 3: // Quitter
                        return;
                }
            }
        }
        rest(100);
    }
}
